<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Paul C Pederson</title>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link></link>
    <description>I'm a web designer and developer living in Portland, OR. I write about art, maps, design, and the internet.</description>
    <pubDate>Tue, 07 Apr 2015 17:00:00 -0700</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>Using NPM as a Task Runner</title>
      <link>/articles/npm-run/</link>
      <pubDate>Tue, 07 Apr 2015 17:00:00 -0700</pubDate>
      <guid isPermaLink="true">/articles/npm-run/</guid>
      <author></author>
      <description>&lt;p&gt;It’s &lt;a href=&quot;/articles/automatic-github-releases&quot;&gt;no secret&lt;/a&gt; that I like Grunt. As somebody who was running tasks like minification, image compression, and css preprocessing by hand, Grunt was a breath of fresh air. But like any technology, there was a learning curve. I had to find the right grunt plugins, learn how to configure and run everything, and also update my tasks as Grunt made breaking changes between versions.&lt;/p&gt;
&lt;p&gt;After several months of drinking the Grunt KoolAid while scrolling up and down in a monolithic four hundred line &lt;code&gt;Gruntfile.js&lt;/code&gt; I suddenly realized how insane this had all become. There was a lot of boilerplate for something that is really not that complicated. Around that time I read &lt;a href=&quot;http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/&quot;&gt;this article&lt;/a&gt;, which really interested me. Wanting to learn more, I found &lt;a href=&quot;http://substack.net/task_automation_with_npm_run&quot;&gt;a similar article by substack&lt;/a&gt;. I remained hesitant, but thought I’d give it a try as an experiment on my next personal project.&lt;/p&gt;
&lt;p&gt;About two months later I am still using npm to manage development tasks and I don’t think I’ll go back to grunt, gulp, or whatever broccoli is. There is something really refreshing and eloquent about using a simple list of commands in a JSON file. I now feel like I’ve gotten to the same comfort level using npm scripts as I had with Grunt, but now everything fits on one screen. Below I’ll give a brief intro into how NPM runs commands, after which I’ll dive into my current approach for various common tasks that front-end web development requires.&lt;/p&gt;
&lt;h2 id=&quot;how-npm-runs-scripts&quot;&gt;How NPM Runs Scripts&lt;/h2&gt;
&lt;p&gt;NPM uses a file called &lt;code&gt;package.json&lt;/code&gt; to do pretty much everything. If you were using Grunt or Gulp, chances are you are already familiar with this file. Along with &lt;code&gt;dependencies&lt;/code&gt;, &lt;code&gt;devDependencies&lt;/code&gt;, and things like &lt;code&gt;repository&lt;/code&gt;, &lt;code&gt;version&lt;/code&gt;, and &lt;code&gt;name&lt;/code&gt; keys, &lt;code&gt;package.json&lt;/code&gt; also includes a key called &lt;code&gt;scripts&lt;/code&gt;. This is a simple list of scripts you can run with npm. The name of the script goes on the left and the corresponding command goes on the right. Scripts that are generally used everywhere in Node-Land are &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt;, but you can add any number of scripts for your project.&lt;/p&gt;
&lt;p&gt;To run a script, just add a command to &lt;code&gt;scripts&lt;/code&gt; like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;: {
  &lt;span class=&quot;string&quot;&gt;&quot;my-script&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;ls -l&quot;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then you can run it with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm run-script my-script
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or, in the interest of typing fewer characters, you can just use:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm run my-script
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will not only run &lt;code&gt;my-script&lt;/code&gt; but it will also run the &lt;code&gt;pre&lt;/code&gt; and &lt;code&gt;post&lt;/code&gt; scripts for that entry if you defined them. So if you had:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;: {
  &lt;span class=&quot;string&quot;&gt;&quot;premy-script&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;echo 'about to list files'&quot;&lt;/span&gt;,
  &lt;span class=&quot;string&quot;&gt;&quot;my-script&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;ls -l&quot;&lt;/span&gt;,
  &lt;span class=&quot;string&quot;&gt;&quot;postmy-script&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;echo 'omg did you see that'&quot;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will get the first message printed, then the list of files, and then the last message.&lt;/p&gt;
&lt;p&gt;The last thing to mention about npm scripts is that they have access to everything in &lt;code&gt;node_modules/.bin/&lt;/code&gt;. Essentially, module authors can register command line tools with npm by adding a &lt;code&gt;bin&lt;/code&gt; key to &lt;code&gt;package.json&lt;/code&gt;. That enables people to install the module globally and then use that tool from the command line.&lt;/p&gt;
&lt;p&gt;For example, &lt;a href=&quot;https://github.com/imagemin/imagemin#cli&quot;&gt;imagemin&lt;/a&gt; has a cli which you can use to minify images from the command line if you install imagemin globally (specified &lt;a href=&quot;https://github.com/imagemin/imagemin/blob/master/package.json#L16&quot;&gt;here&lt;/a&gt;). If you use imagemin via an npm script &lt;em&gt;you don’t have to install anything globally&lt;/em&gt;. NPM automatically adds their bin to &lt;code&gt;node_modules/.bin&lt;/code&gt; and makes it available to the command from your script!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You don’t have to install anything globally.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is amazing because now people that contribute to your project can get everything they need with a simple &lt;code&gt;npm install&lt;/code&gt;. That lowers the barrier of entry to contributing to your project, and also lets you tightly control what version of imagemin your project uses if you want to.&lt;/p&gt;
&lt;h2 id=&quot;front-end-tasks&quot;&gt;Front End Tasks&lt;/h2&gt;
&lt;p&gt;Now that we know the basics of how this might work, I’ll dive into some common tasks for front-end development. Some of these things were a challenge to set up the first time, and some I had to write myself, but hopefully this can shorten the learning curve for those of you just starting to use npm or inspire you to try it if you’re just curious.&lt;/p&gt;
&lt;h3 id=&quot;javascript&quot;&gt;JavaScript&lt;/h3&gt;
&lt;p&gt;It is pretty common now to include a compile or build step for processing JavaScript. At the very least, you should probably be minifying your files so they are smaller.&lt;/p&gt;
&lt;p&gt;Personally, I’ve fallen in love with &lt;a href=&quot;http://browserify.org/&quot;&gt;browserify&lt;/a&gt; which basically allows you to write JavaScript in the “node-style” and then compile it so it works in browsers. Why this is so awesome is the subject of another post, but creating some tooling for it is very easy. Just &lt;code&gt;npm install --save-dev browserify&lt;/code&gt; and add a script to your &lt;code&gt;package.json&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;: {
  &lt;span class=&quot;string&quot;&gt;&quot;js&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;browserify -e index.js -d -o bundle.js&quot;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will start at &lt;code&gt;index.js&lt;/code&gt; and compile a bundle of browser-ready JavaScript that you can load from your html file. Now from the command line you can use &lt;code&gt;npm run js&lt;/code&gt; to create your bundle.&lt;/p&gt;
&lt;h5 id=&quot;notes&quot;&gt;Notes&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;If your &lt;code&gt;--output&lt;/code&gt; file is in a directory that isn’t there, it will throw an error. To fix this, you can just add a &lt;code&gt;prejs&lt;/code&gt; script that creates it: &lt;code&gt;&amp;quot;prejs&amp;quot;: &amp;quot;mkdir -p build/&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;There are a &lt;a href=&quot;https://www.npmjs.com/browse/keyword/browserify-transform&quot;&gt;lot of transforms&lt;/a&gt; for Browserify. If you start using more than one, you can use the &lt;a href=&quot;https://github.com/substack/node-browserify#packagejson&quot;&gt;&lt;code&gt;browserify&lt;/code&gt; object&lt;/a&gt; in your &lt;code&gt;package.json&lt;/code&gt; to keep things cleaner.&lt;/li&gt;
&lt;li&gt;If you want to minify your JS (and you should!) you can also pipe the output of browserify through &lt;a href=&quot;https://www.npmjs.com/package/uglify-js&quot;&gt;uglify&lt;/a&gt; like this: &lt;code&gt;browserify index.js | uglifyjs &amp;gt; bundle.min.js&lt;/code&gt;. (Make sure you &lt;code&gt;npm install --save-dev uglify-js&lt;/code&gt; first!)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;css&quot;&gt;CSS&lt;/h3&gt;
&lt;p&gt;As far as CSS preprocessors go, I’m a fan of Sass. Up until recently it’s been sort of a pain to install because it relied on Ruby. But thanks to &lt;a href=&quot;https://github.com/sass/libsass&quot;&gt;LibSass&lt;/a&gt; and consequently &lt;a href=&quot;https://github.com/sass/node-sass&quot;&gt;node-sass&lt;/a&gt; it is now &lt;em&gt;very&lt;/em&gt; easy (and crazy fast) to use Sass in a project with Node.js. The best part of using node-sass is that contributors to your project won’t need Ruby or Sass installed locally. NPM will automatically install everything it needs on &lt;code&gt;npm install&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Using the &lt;a href=&quot;https://github.com/sass/node-sass#command-line-interface&quot;&gt;node-sass cli&lt;/a&gt; actually proved to be a bit difficult because it didn’t provide a way to compile multiple Sass files. I often have a main CSS file that provides the base styles for everything, and then I’ll break out page-specific styles into their own file so that the main file can be cached but doesn’t include the whole kitchen sink.&lt;/p&gt;
&lt;p&gt;So what’s a boy to do when an open source tool is missing a feature? Why, &lt;a href=&quot;https://github.com/sass/node-sass/pull/838&quot;&gt;open a pull request&lt;/a&gt;, of course! Once that got merged, adding a Sass task for all your files is really easy. Just &lt;code&gt;npm install --save-dev node-sass&lt;/code&gt;. Then add a script to &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;: {
  &lt;span class=&quot;string&quot;&gt;&quot;sass&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;node-sass sass/ -o build/css/&quot;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will compile all of the sass files (that don’t start with an underscore) to the &lt;code&gt;build/css/&lt;/code&gt; directory.&lt;/p&gt;
&lt;h3 id=&quot;images&quot;&gt;Images&lt;/h3&gt;
&lt;p&gt;This was one of the harder tasks to figure out for me. I tried a lot of solutions, but in the end I found that &lt;a href=&quot;https://github.com/imagemin/imagemin&quot;&gt;imagemin&lt;/a&gt; was the easiest to use. Again, though, there was a small hiccup: running imagemin on a folder would optimize all the images in that folder regardless of if you had already optimized them or not.&lt;/p&gt;
&lt;p&gt;To solve this problem, I threw together a quick little module that checks if each image is newer. I named the module, wait for it, &lt;a href=&quot;https://github.com/paulcpederson/imagemin-newer&quot;&gt;imagemin-newer&lt;/a&gt;. Now, you can just &lt;code&gt;npm install --save-dev imagemin-newer&lt;/code&gt; and then add the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;: {
  &lt;span class=&quot;string&quot;&gt;&quot;img&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;imagemin-newer img/ build/img&quot;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will optimize and compress any image (gif, png, svg, jpg) that was added or has changed inside the &lt;code&gt;img/&lt;/code&gt; folder and save the compressed version in &lt;code&gt;build/img/&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;watching&quot;&gt;Watching&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;“Great”, I hear you saying, “but what about running a script automatically when files change?”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;First of all &lt;em&gt;extremely interesting question&lt;/em&gt;. I accomplish this with a module called &lt;a href=&quot;https://www.npmjs.com/package/rerun-script&quot;&gt;rerun-script&lt;/a&gt;. Basically it allows you to &lt;em&gt;rerun a script&lt;/em&gt; (straight-forward names are the best) whenever files matching a certain pattern change.  The patterns are stored in a &lt;code&gt;watches&lt;/code&gt; key in your &lt;code&gt;package.json&lt;/code&gt;. So after you &lt;code&gt;npm install --save-dev rerun-script&lt;/code&gt; you can add the following to your &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;watches&quot;&lt;/span&gt;: {
  &lt;span class=&quot;string&quot;&gt;&quot;js&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;js/**&quot;&lt;/span&gt;,
  &lt;span class=&quot;string&quot;&gt;&quot;sass&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;sass/**&quot;&lt;/span&gt;,
  &lt;span class=&quot;string&quot;&gt;&quot;img&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;img/**&quot;&lt;/span&gt;
},
&lt;span class=&quot;string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;: {
  &lt;span class=&quot;string&quot;&gt;&quot;js&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;browserify -e js/index.js -d -o build/bundle.js&quot;&lt;/span&gt;,
  &lt;span class=&quot;string&quot;&gt;&quot;sass&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;node-sass sass/ -o build/css/&quot;&lt;/span&gt;,
  &lt;span class=&quot;string&quot;&gt;&quot;img&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;imagemin-newer img/ build/img&quot;&lt;/span&gt;,
  &lt;span class=&quot;string&quot;&gt;&quot;dev&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;rerun-script&quot;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can &lt;code&gt;npm run dev&lt;/code&gt; and it will watch each of these folders and run the corresponding task when things change.&lt;/p&gt;
&lt;h3 id=&quot;running-a-preview-server&quot;&gt;Running a Preview Server&lt;/h3&gt;
&lt;p&gt;To run a preview server I’ve been using &lt;a href=&quot;https://www.npmjs.com/package/live-server&quot;&gt;live-server&lt;/a&gt;. Once you experience automatic CSS reloads without a page refresh it’s sort of hard to go back…&lt;/p&gt;
&lt;p&gt;After you &lt;code&gt;npm install --save-dev live-server&lt;/code&gt;, you can just create a script to run a server:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;: {
  &lt;span class=&quot;string&quot;&gt;&quot;preview&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;live-server&quot;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if you use &lt;code&gt;npm run preview&lt;/code&gt; you’ll have a server running on &lt;code&gt;localhost:8080&lt;/code&gt; that will automatically open and then reload whenever anything changes.&lt;/p&gt;
&lt;h3 id=&quot;tying-it-all-together&quot;&gt;Tying It All Together&lt;/h3&gt;
&lt;p&gt;It’s pretty common to have a couple more tasks like building a static site, running a test suite for your JavaScript, uploading assets to s3, or even deploying your site. But at this point it should be pretty obvious how to go about adding those things.&lt;/p&gt;
&lt;p&gt;Here’s what a working set of scripts might look like in a real project:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt; &lt;span class=&quot;string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;: {
    &lt;span class=&quot;string&quot;&gt;&quot;js&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;browserify -e js/index.js -d -o build/js/bundle.js&quot;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&quot;sass&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;node-sass sass/ -q -o build/css/&quot;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&quot;img&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;imagemin-newer img/ build/img/&quot;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&quot;predev&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;mkdir -p build &amp;amp;&amp;amp; npm-run-all js sass img --parallel&quot;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&quot;dev&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;parallelshell 'cd build/ &amp;amp;&amp;amp; live-server' 'rerun-script'&quot;&lt;/span&gt;
  },
  &lt;span class=&quot;string&quot;&gt;&quot;watches&quot;&lt;/span&gt;: {
    &lt;span class=&quot;string&quot;&gt;&quot;js&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;js/**&quot;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&quot;sass&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;sass/**&quot;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&quot;img&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;img/**&quot;&lt;/span&gt;
  },
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above creates a JavaScript bundle and exports that to the build folder. It also compiles sass and optimized images, placing both of the end results in the build folder.&lt;/p&gt;
&lt;p&gt;Before the &lt;code&gt;dev&lt;/code&gt; task is run, there is a &lt;code&gt;predev&lt;/code&gt; task which will make sure there is a build folder, then run all three of our other tasks in parallel once at the beginning using &lt;a href=&quot;https://www.npmjs.com/package/npm-run-all&quot;&gt;npm-run-all&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then, it uses &lt;a href=&quot;https://github.com/keithamus/parallelshell&quot;&gt;parallelshell&lt;/a&gt; to go into the build folder, start up a preview server, and kick off the file watcher. &lt;code&gt;npm run dev&lt;/code&gt; is all you need now to spin everything up and get started.&lt;/p&gt;
&lt;p&gt;Hopefully that was helpful. I know this type of article has been written before, but I feel like most of them don’t really go into the things you actually need to know to get going. As always, if anything is just super wrong, tweet angrily at me: &lt;a href=&quot;https://twitter.com/paulcpederson&quot;&gt;@paulcpederson&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Automating GitHub Releases with Grunt</title>
      <link>/articles/automatic-github-releases/</link>
      <pubDate>Thu, 01 Jan 2015 16:00:00 -0800</pubDate>
      <guid isPermaLink="true">/articles/automatic-github-releases/</guid>
      <author></author>
      <description>&lt;p&gt;If you’ve used GitHub releases you know how great they can be. Essentially you draft a new release on any of your GitHub repositories, choose a specific tag, enter a title and a description, and click a button to create a neat and tidy little package that users can download and use.&lt;/p&gt;
&lt;p&gt;Recently I realized that creating these releases was one of the only things I was doing by hand, and that seemed inefficient, so I endeavored to solve the problem with Grunt. It was all very easy with Grunt plugins that were already written, but there were a couple gotchas, so I thought I’d write it up for future generations.&lt;/p&gt;
&lt;h2 id=&quot;grunt-compress&quot;&gt;Grunt Compress&lt;/h2&gt;
&lt;p&gt;First, you create a zip file that people looking at your
GitHub release can download using &lt;a href=&quot;https://github.com/gruntjs/grunt-contrib-compress&quot;&gt;grunt-contrib-compress&lt;/a&gt;. This is super straightforward. Install it: &lt;code&gt;npm install --save-dev grunt-contrib-compress&lt;/code&gt;, then load and configure it in &lt;code&gt;Gruntfile.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;compress: {
  main: {
    options: {
      archive: &lt;span class=&quot;string&quot;&gt;'name.zip'&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// What you want to call your file&lt;/span&gt;
    },
    files: [
      {
        src: [&lt;span class=&quot;string&quot;&gt;'dist/**'&lt;/span&gt;], &lt;span class=&quot;comment&quot;&gt;// What should be included in the zip&lt;/span&gt;
        dest: &lt;span class=&quot;string&quot;&gt;'./'&lt;/span&gt;        &lt;span class=&quot;comment&quot;&gt;// Where the zipfile should go&lt;/span&gt;
      },
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s probably a good idea to add &lt;code&gt;name.zip&lt;/code&gt; (or whatever you end up naming your file) to your &lt;code&gt;.gitignore&lt;/code&gt; so you aren’t tracking checking it into git.&lt;/p&gt;
&lt;h2 id=&quot;grunt-github-releaser&quot;&gt;Grunt GitHub Releaser&lt;/h2&gt;
&lt;p&gt;The most important plugin to use was obviously &lt;a href=&quot;https://github.com/dolbyzerr/grunt-github-releaser&quot;&gt;grunt-github-releaser&lt;/a&gt;. I chose this one, but there are a myriad of grunt plugins that handle creating releasing on GitHub and any would probably work. This handles almost all of the heavy-lifting for you in terms of creating a GitHub release. A sample would be something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;string&quot;&gt;'github-release'&lt;/span&gt;: {
  options: {
    repository: &lt;span class=&quot;string&quot;&gt;'yourName/repo-name'&lt;/span&gt;,
    release: {
      tag_name: &lt;span class=&quot;string&quot;&gt;'v1.0.0'&lt;/span&gt;,
      name: &lt;span class=&quot;string&quot;&gt;'v1.0.0'&lt;/span&gt;,
      body: &lt;span class=&quot;string&quot;&gt;'Description of the release'&lt;/span&gt;
    }
  },
  files: {
    src: [&lt;span class=&quot;string&quot;&gt;'name.zip'&lt;/span&gt;]
  }
},
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now what you should be thinking in your head is “I would have to change all of these settings every signle time I create a release!”. Let’s fix that. First, use the version number in your &lt;code&gt;package.json&lt;/code&gt; as your tag and title:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;string&quot;&gt;'github-release'&lt;/span&gt;: {
  options: {
    repository: &lt;span class=&quot;string&quot;&gt;'yourName/repo-name'&lt;/span&gt;,
    release: {
      tag_name: grunt.file.readJSON(&lt;span class=&quot;string&quot;&gt;'package.json'&lt;/span&gt;).version,
      name: grunt.file.readJSON(&lt;span class=&quot;string&quot;&gt;'package.json'&lt;/span&gt;).version,
      body: &lt;span class=&quot;string&quot;&gt;'Description of the release'&lt;/span&gt;
    }
  },
  files: {
    src: [&lt;span class=&quot;string&quot;&gt;'name.zip'&lt;/span&gt;]
  }
},
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now all that’s left is the body (description) of the release. I have been just parsing this from my &lt;code&gt;CHANGELOG.md&lt;/code&gt;, but there are numerous ways to handle that.&lt;/p&gt;
&lt;h2 id=&quot;grunt-prompt&quot;&gt;Grunt Prompt&lt;/h2&gt;
&lt;p&gt;The final step is to sign in to GitHub with your username and password so you can upload a release. The grunt-github-releaser plugin has an &lt;code&gt;auth&lt;/code&gt; object where you can put your username and password, but that should &lt;strong&gt;terrify&lt;/strong&gt; you because then your password would be in plaintext in a (maybe public) GitHub repo…&lt;/p&gt;
&lt;p&gt;I solved this problem using &lt;a href=&quot;https://github.com/dylang/grunt-prompt&quot;&gt;grunt-prompt&lt;/a&gt;. This lets us ask for a username and password when the grunt task is run. After you npm install and load the grunt task, configure prompt like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;prompt: {
  target: {
    options: {
      questions: [
        {
          config: &lt;span class=&quot;string&quot;&gt;'github-release.options.auth.user'&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// set the user to whatever is typed for this question&lt;/span&gt;
          type: &lt;span class=&quot;string&quot;&gt;'input'&lt;/span&gt;,
          message: &lt;span class=&quot;string&quot;&gt;'GitHub username:'&lt;/span&gt;
        },
        {
          config: &lt;span class=&quot;string&quot;&gt;'github-release.options.auth.password'&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// set the password to whatever is typed for this question&lt;/span&gt;
          type: &lt;span class=&quot;string&quot;&gt;'password'&lt;/span&gt;,
          message: &lt;span class=&quot;string&quot;&gt;'GitHub password:'&lt;/span&gt;
        }
      ]
    }
  }
},
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will set the values of grunt-github-releaser to be whatever the user enters in the prompt. You could even add a prompt for a release body here if you don’t have a way of getting that yet!&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;Now, you would just register a grunt task that runs these plugins in the right order and give it a sensible name like, I don’t know, &lt;code&gt;release&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;grunt.registerTask(&lt;span class=&quot;string&quot;&gt;'release'&lt;/span&gt;, [
  &lt;span class=&quot;string&quot;&gt;'prompt'&lt;/span&gt;,
  &lt;span class=&quot;string&quot;&gt;'compress'&lt;/span&gt;,
  &lt;span class=&quot;string&quot;&gt;'github-release'&lt;/span&gt;
]);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can just use &lt;code&gt;grunt release&lt;/code&gt;. Enter your username and password and you’re done!&lt;/p&gt;
&lt;p&gt;As always, if this makes no sense, is wrong, or could be improved, you should tweet at me: &lt;a href=&quot;https://twitter.com/paulcpederson&quot;&gt;@paulcpederson&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Make your own Heroku</title>
      <link>/articles/make-your-own-heroku/</link>
      <pubDate>Wed, 23 Apr 2014 17:00:00 -0700</pubDate>
      <guid isPermaLink="true">/articles/make-your-own-heroku/</guid>
      <author></author>
      <description>&lt;p&gt;If you’ve ever used &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;, you know how easy and convenient it is to be able to deploy a quick static site by pushing to a remote. Being able to type &lt;code&gt;git push origin gh-pages&lt;/code&gt; and have your site immediately live on a publicly accessible domain is hugely satisfying and you end up experimenting way more, pushing up micro-sites and project pages because it’s easy.&lt;/p&gt;
&lt;p&gt;GitHub pages does have a limitation, though: there is no concept of a server. While you might not notice that on smaller projects or experiments, it is inevitable that you will run into it eventually. Sometimes you just want a server.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.heroku.com/&quot;&gt;Heroku&lt;/a&gt; enables you to have the concept of a server, with a similar work-flow: make something, then push to a remote with git and it’s on the internet. But Heroku costs money. It’s free at first, but as you scale, it begins to get more expensive fairly quickly. Add a couple more dynos and you’re already up to $70.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Enter Dokku, an open source mini-Heroku.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With Dokku, you can run your own (albeit slightly less feature-rich) Heroku. With a $5 / month Digital Ocean droplet, this DIY solution is pretty inexpensive and easy to set up. By following &lt;a href=&quot;https://gist.github.com/ngoldman/7287753&quot;&gt;several&lt;/a&gt; &lt;a href=&quot;https://www.digitalocean.com/community/articles/how-to-use-the-digitalocean-dokku-application&quot;&gt;tutorials&lt;/a&gt; written by &lt;a href=&quot;https://twitter.com/ungoldman&quot;&gt;people&lt;/a&gt; &lt;a href=&quot;https://twitter.com/aranasaurus&quot;&gt;smarter&lt;/a&gt; than I am, I was able to set up Dokku to act as my gh-pages and Heroku on a custom domain. Plus I got the feeling of satisfaction that can only come with doing something yourself! Do you want to go to there? Read on, intrepid adventurer!&lt;/p&gt;
&lt;h2 id=&quot;1-get-a-domain-name&quot;&gt;1. Get a Domain Name&lt;/h2&gt;
&lt;p&gt;I recommend &lt;a href=&quot;https://www.namecheap.com/&quot;&gt;namecheap&lt;/a&gt; only because I have experience with them and they’re not Godaddy… I registered &lt;a href=&quot;http://app-lab.me/&quot;&gt;app-lab.me&lt;/a&gt; for $8 a year.&lt;/p&gt;
&lt;h2 id=&quot;2-create-a-digital-ocean-account&quot;&gt;2. Create a Digital Ocean Account&lt;/h2&gt;
&lt;p&gt;Create an account with Digital Ocean: &lt;a href=&quot;https://cloud.digitalocean.com/registrations/new&quot;&gt;digitalocean.com&lt;/a&gt;. Use the coupon code JEDGAR for $55 free.&lt;/p&gt;
&lt;h2 id=&quot;3-create-a-droplet&quot;&gt;3. Create a Droplet&lt;/h2&gt;
&lt;p&gt;Make a &lt;a href=&quot;https://cloud.digitalocean.com/droplets/new&quot;&gt;new droplet&lt;/a&gt; in DigitalOcean. Be sure to name the droplet exactly what your domain is. For example, I named my droplet &lt;code&gt;app-lab.me&lt;/code&gt;. Select the smallest size, and whatever region is closest to you.&lt;/p&gt;
&lt;p&gt;In the “Select Image” section, click the “Applications” tab and choose the “Dokku-v0.2.3 on Ubuntu 14.04” option.&lt;/p&gt;
&lt;p&gt;Click “Create Droplet”.&lt;/p&gt;
&lt;h2 id=&quot;4-configure-the-dns&quot;&gt;4. Configure the DNS&lt;/h2&gt;
&lt;p&gt;To get your domain to point to your new droplet, you need to change the DNS records. Just go to the page to edit “All Host Records”, in Namecheap that can be found at:  &lt;em&gt; My Account &amp;gt; Manage Domains &amp;gt; Modify Domain &amp;gt; All Host Records&lt;/em&gt;. Use the following host name and subdomain settings:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;HOST NAME&lt;/th&gt;
&lt;th&gt;IP ADDRESS/URL&lt;/th&gt;
&lt;th&gt;RECORD TYPE&lt;/th&gt;
&lt;th&gt;MX PREF&lt;/th&gt;
&lt;th&gt;TTL&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;@&lt;/td&gt;
&lt;td&gt;your.droplet.ip.address&lt;/td&gt;
&lt;td&gt;A (Address)&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;www&lt;/td&gt;
&lt;td&gt;your.domain&lt;/td&gt;
&lt;td&gt;URL Redirect (301)&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;your.ip.address.k.thx&lt;/td&gt;
&lt;td&gt;A (Address)&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The * entry for subdomains allows you to make any number of apps on different subdomains.&lt;/p&gt;
&lt;h2 id=&quot;5-generate-an-ssh-key-pair&quot;&gt;5. Generate an SSH Key Pair&lt;/h2&gt;
&lt;p&gt;I’ll describe what these are in more detail below in the “Set up SSH Keys” section. Don’t worry too much about it right now, just generate a pair like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go into your .ssh directory: &lt;code&gt;cd ~/.ssh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Type: &lt;code&gt;ssh-keygen&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;When prompted, enter a name for the pair (I used app-lab)&lt;/li&gt;
&lt;li&gt;If you’d like to password protect it enter a password (I left this blank)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After it’s done, you should have two files: &lt;code&gt;{name}&lt;/code&gt; and &lt;code&gt;{name}.pub&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;6-set-up-the-droplet&quot;&gt;6. Set up the Droplet&lt;/h2&gt;
&lt;p&gt;If you go to the IP address (in the email or listed in Digital Ocean) you should see a screen that has several fields. Add a public ssh key from the previous step (that’s the one that ends in &lt;code&gt;.pub&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Hostname should be your domain name exactly. For me, hostname was “app-lab.me”.&lt;/p&gt;
&lt;p&gt;Check “virtual host naming” if you’d like your Dokku apps to be formatted like &lt;code&gt;app-name.your.domain&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Click “Finish Setup”&lt;/p&gt;
&lt;h2 id=&quot;7-connect-to-your-droplet&quot;&gt;7. Connect to your Droplet&lt;/h2&gt;
&lt;p&gt;First, ensure that your domain is pointing at the droplet’s IP Address. Type: &lt;code&gt;dig +short your.domain&lt;/code&gt;. This should respond with the IP Address of your droplet.&lt;/p&gt;
&lt;p&gt;If that was a success, now you can connect to your droplet with your password. You should have received an email with your IP address and password. Use &lt;code&gt;ssh&lt;/code&gt; to connect to your droplet: &lt;code&gt;ssh root@your.domain&lt;/code&gt; then enter your password and you should be in!&lt;/p&gt;
&lt;h2 id=&quot;8-set-up-ssh-keys&quot;&gt;8. Set up SSH Keys&lt;/h2&gt;
&lt;p&gt;To make it so you don’t have to type your password every time you connect to your droplet or push to Dokku, you can set up ssh keys. Basically, there are two files, one that is on your machine, and one that is on the Digital Ocean droplet. The droplet checks to make sure you have the key that matches it’s key, and automatically connects you without a password. We created the keys a few steps back, now let’s use them to connect to our droplet.&lt;/p&gt;
&lt;h4 id=&quot;make-sure-you-have-the-keys&quot;&gt;Make Sure you Have the Keys&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Go into your .ssh directory: &lt;code&gt;cd ~/.ssh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Ensure your keys you generated previously are still there. You should see them listed if you type &lt;code&gt;ls -l&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If they aren’t there, generate a new pair (see above).&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;create-a-config-file&quot;&gt;Create a Config File&lt;/h4&gt;
&lt;p&gt;Create a file named &lt;code&gt;config&lt;/code&gt; inside your &lt;code&gt;.ssh/&lt;/code&gt; directory so your computer knows to use the new ssh keys for your domain. My config looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Host app-lab app-lab.me
Hostname app-lab.me
IdentityFile ~/.ssh/app-lab
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Basically, this is how ssh knows to use that particular key for that host. Obviously change &lt;code&gt;app-lab.me&lt;/code&gt; to your domain, and &lt;code&gt;.ssh/app-lab&lt;/code&gt; to whatever you named your ssh keys.&lt;/p&gt;
&lt;h4 id=&quot;put-the-public-key-on-your-droplet&quot;&gt;Put the Public Key on your Droplet&lt;/h4&gt;
&lt;p&gt;To upload the public key to your droplet, just type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat ~/.ssh/{name}.pub | ssh root@your.domain &amp;quot;cat &amp;gt;&amp;gt; ~/.ssh/authorized_keys&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Replacing the &lt;code&gt;{name}&lt;/code&gt; with your key name and &lt;code&gt;your.domain&lt;/code&gt; with your domain name.&lt;/p&gt;
&lt;h4 id=&quot;connect-without-a-password&quot;&gt;Connect Without a Password&lt;/h4&gt;
&lt;p&gt;You should now be able to now connect to your droplet without a password like this: &lt;code&gt;ssh root@your.domain&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If that worked, you can now (optionally) disable password login to your droplet:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Connect to your droplet: &lt;code&gt;ssh root@your.domain&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Open your config: &lt;code&gt;sudo nano /etc/ssh/sshd_config&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Find the &lt;code&gt;PermitRootLogin&lt;/code&gt; line and edit it so it reads: &lt;code&gt;PermitRootLogin without-password&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Reload your ssh: &lt;code&gt;reload ssh&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;9-deploy-an-app-to-a-subdomain&quot;&gt;9. Deploy an App to a Subdomain&lt;/h2&gt;
&lt;p&gt;Now you’re all set to deploy apps to Dokku. If you want to deploy a test app, you can use the Node JS Test App:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;clone the repo: &lt;code&gt;git clone git@github.com:heroku/node-js-sample.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd node-js-sample&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;add Dokku as a remote: &lt;code&gt;git remote add dokku dokku@your.domain:test&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;push to Dokku: &lt;code&gt;git push dokku master&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After Dokku finishes deploying your app and reports back that it’s finished, your app should be live at test.your.domain. Notice that the subdomain will be whatever you entered after the colon in your remote name. For example, if you want your app to live at apples.your.domain, you could add your remote like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git remote add dokku dokku@your.domain:apples
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;deploying-an-app-to-the-root-domain&quot;&gt;Deploying an App to the Root Domain&lt;/h2&gt;
&lt;p&gt;To add an app to the root domain, you just use the domain name when you add the remote. For example, if your domain was chickens.me, you would add your remote like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git remote add dokku dokku@chickens.me:chickens.me
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once you push, the app will be live at chickens.me.&lt;/p&gt;
&lt;h2 id=&quot;deploying-an-app-to-another-domain&quot;&gt;Deploying an App to Another Domain&lt;/h2&gt;
&lt;p&gt;It’s also pretty easy to use another domain and point it to Dokku. It works similarly to how you add a project to the root domain (see above).&lt;/p&gt;
&lt;p&gt;Let’s say you are building a little site for a domain you own, we’ll call it my-special-domain.com, but you set up Dokku on another domain like dokku-domain.com. When you decide to deploy your site, all you need to do is change the DNS records for my-special-domain. Go to the “All Host Records” page for my-special-domain.com (in Namecheap: “My Account &amp;gt; Manage Domains &amp;gt; Modify Domain”) and change the @ and www entries so they read like this:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;HOST NAME&lt;/th&gt;
&lt;th&gt;IP ADDRESS/URL&lt;/th&gt;
&lt;th&gt;RECORD TYPE&lt;/th&gt;
&lt;th&gt;MX PREF&lt;/th&gt;
&lt;th&gt;TTL&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;@&lt;/td&gt;
&lt;td&gt;YOUR.DROPLET.IP.ADDRESS&lt;/td&gt;
&lt;td&gt;A (Address)&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WWW&lt;/td&gt;
&lt;td&gt;YOUR.DOMAIN&lt;/td&gt;
&lt;td&gt;CNAME&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Then when you add your remote, you would add it like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git remote add dokku dokku@dokku-domain.com:my-special-domain.com
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once the domain is pointing to your droplet’s IP and you’ve pushed to your remote, you should see your app on my-special-domain.com.&lt;/p&gt;
&lt;h2 id=&quot;deploying-a-static-app-in-a-subfolder&quot;&gt;Deploying a Static App in a Subfolder&lt;/h2&gt;
&lt;p&gt;Deploying a static app actually took a bit of hunting around to find, but once I figured it out, it’s dead simple. Essentially you just include an empty &lt;code&gt;.nginx&lt;/code&gt; file in the root level of your project, and put all your static content in a &lt;code&gt;www&lt;/code&gt; directory and it will be served on an nginx server automatically. For example, if I had a simple &lt;code&gt;index.html&lt;/code&gt; file and a &lt;code&gt;style.css&lt;/code&gt; file I wanted to serve statically, my project would look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.nginx
www
  - index.html
  - style.css
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That’s it! You can have as many folders and files inside the &lt;code&gt;www&lt;/code&gt; directory as you need and it will serve it up statically for you. This is really useful if you use a static site generator to produce a folder of html as you can just set it to build to &lt;code&gt;/www&lt;/code&gt; and your site will automatically work.&lt;/p&gt;
&lt;h2 id=&quot;deploying-a-static-app-from-the-root-folder&quot;&gt;Deploying a Static App From the Root Folder&lt;/h2&gt;
&lt;p&gt;If you have no need for a subfolder, you can deploy a static app from the root of your project by adding an empty &lt;code&gt;.htaccess&lt;/code&gt; file. The folder structure would look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.htaccess
index.html
style.css
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Dokku should automagically understand that you’re writing an app that uses Apache and give you a simple static site after you push.&lt;/p&gt;
&lt;h2 id=&quot;deploying-a-static-app-with-password-protection&quot;&gt;Deploying a Static App with Password Protection&lt;/h2&gt;
&lt;p&gt;This is a really good reason to use Dokku instead of gh-pages. It is super common to want to keep a project private from the general public and only allow clients, or other developers to see it. It took me forever to figure this out, and when I did I felt really stupid because it is ridiculously easy. Essentially, you deploy a static app exactly as above, but you add a &lt;code&gt;.htpasswd&lt;/code&gt; file to the root of your app and a couple lines to your &lt;code&gt;.htaccess&lt;/code&gt; file. Essentially your &lt;code&gt;.htaccess&lt;/code&gt; file will look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AuthUserFile /app/www/.htpasswd
AuthType Basic
AuthName &amp;quot;Restricted Access&amp;quot;
Require valid-user
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, you can go to this &lt;a href=&quot;http://www.htaccesstools.com/htpasswd-generator/&quot;&gt;htpasswd generator site&lt;/a&gt;. Enter the username and password and copy the generated entry into a &lt;code&gt;.htpasswd&lt;/code&gt; file, also in the root of your project. Your folder structure will look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.htaccess
.htpasswd
index.html
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When you push to Dokku, it will use your .htaccess file and require you to login. It will probably save your password, so a computer will only need to log in once.&lt;/p&gt;
&lt;h2 id=&quot;deleting-an-app&quot;&gt;Deleting an App&lt;/h2&gt;
&lt;p&gt;If you want to remove an app, first, connect with ssh:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh root@your.domain
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you set up ssh keys, this should work without a password. Then simply run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dokku delete app_name
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Where &lt;code&gt;app_name&lt;/code&gt; is the name of the app you’d like to delete.&lt;/p&gt;
&lt;h2 id=&quot;final-thoughts-and-credits&quot;&gt;Final Thoughts and Credits&lt;/h2&gt;
&lt;p&gt;This post is just notes from going through this process myself. I followed my brilliant coworker Nate’s (&lt;a href=&quot;https://twitter.com/ungoldman&quot;&gt;ngoldman&lt;/a&gt;) write-up, which you can read &lt;a href=&quot;https://gist.github.com/ngoldman/7287753&quot;&gt;here&lt;/a&gt;. Since I’m pretty new to all this, there were a couple stumbling blocks for me (especially dealing with ssh keys), so I wanted to put this out there and make it available in case other people had trouble with the same things.&lt;/p&gt;
&lt;p&gt;If there’s anything that could be improved, or is just totally wrong, tweet at me: &lt;a href=&quot;https://twitter.com/paulcpederson&quot;&gt;@paulcpederson&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Swiss Topo Maps</title>
      <link>/articles/swiss-topo-maps/</link>
      <pubDate>Sat, 14 Dec 2013 16:00:00 -0800</pubDate>
      <guid isPermaLink="true">/articles/swiss-topo-maps/</guid>
      <author></author>
      <description>&lt;p&gt;Switzerland has become known for beautiful cartography. It should come as no surprise (seeing that their nation is almost entirely mountainous) that their presentation of relief is especially effective. The vast changes in elevation presented in this relatively small country necessitate huge amounts of work and thought on the part of cartographers.&lt;/p&gt;
&lt;p&gt;General Guillaume-Henri Dufour founded the Federal Office of Topography in 1838, which published its first map in 1844. After an extensive effort, the entirety of Switzerland had been mapped by 1864. Generally, the office began work on a new map immediately after they had finished the old map. Most of the time the country was using two maps at the same time, some areas having the older map and some areas having the newer map. Below are the three major maps that were completed and their use dates.&lt;/p&gt;
&lt;h3 id=&quot;dufour-map&quot;&gt;Dufour Map&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/articles/swiss-topo-maps/dufour.jpg&quot; alt=&quot;Image of Dufour Map&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;caption&quot;&gt;
  The Dufour map was used from 1844 until 1939.
&lt;/p&gt;

&lt;p&gt;Although the first surveys of Switzerland took place as early as 1809, it wasn’t until the Topographic Bureau was formed in 1838 that maps began to be published. The Dufour Map was initially reproduced by intaglio. It was monochromatic until 1908 when a single spot color was added.&lt;/p&gt;
&lt;p&gt;The Dufour Map (named after the first leader of the Office of Topography, General Guillaume-Henri Dufour) was finished in 1864, and a year later, its namesake General retired and a new map was begun.&lt;/p&gt;
&lt;h3 id=&quot;siegfried-map&quot;&gt;Siegfried Map&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/articles/swiss-topo-maps/siegfried.jpg&quot; alt=&quot;Image of Siegfried Map&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;caption&quot;&gt;
  The Siegfried map was used from 1870 until 1949.
&lt;/p&gt;

&lt;p&gt;Its publication was begun by the Federal Topographic Bureau under Hermann Siegfried, and continued from 1870 to 1922.&lt;/p&gt;
&lt;p&gt;The Siegfried Map added contour lines to symbolize relief as well as three colors for printing. These color allowed the map to use brown for contour lines on vegetation, blue for contour lines on water and glaciers, and black for lines on everything else.&lt;/p&gt;
&lt;h3 id=&quot;national-maps&quot;&gt;National Maps&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/articles/swiss-topo-maps/national-map.jpg&quot; alt=&quot;Image of National Map&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;caption&quot;&gt;
  The National maps were used from 1938 and are still used today.
&lt;/p&gt;

&lt;p&gt;Made by Swisstopo, each national map is based on the Mercator projection. Introduced in 1938, the maps are constantly being updated so every map receives updates at least once every six years. First, they were 1:50,000 scale. 1:25,000 scale was introduced in 1952. The colors for the National Maps are especially beautiful and communicative. Contour lines are evident, but not overpowering.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Inline-Block Grid</title>
      <link>/articles/inline-block-grid/</link>
      <pubDate>Thu, 05 Dec 2013 16:00:00 -0800</pubDate>
      <guid isPermaLink="true">/articles/inline-block-grid/</guid>
      <author></author>
      <description>&lt;p&gt;Recently, while working on &lt;a href=&quot;http://www.pdxroasters.com/&quot;&gt;a side-project&lt;/a&gt;, I ran into a problem trying to clear columns of different heights while using a traditional float-based grid system. Upon hearing me complain aloud (a common occurence when I deal with css layout), &lt;a href=&quot;https://github.com/kitajchuk&quot;&gt;another developer&lt;/a&gt; I was working with at the time showed me an interesting &lt;del&gt;hack&lt;/del&gt; solution to the problem which he had learned from a developer he had worked with. After much searching online, I couldn’t find any occurence of this being written down, so I decided to put it on the internet for future generations.&lt;/p&gt;
&lt;h3 id=&quot;the-problem&quot;&gt;The Problem&lt;/h3&gt;
&lt;p&gt;The limitation I ran into while using a standard float-based grid is best described visually:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/inline-block-grid/problem.svg&quot; alt=&quot;Broken float layout&quot;&gt;&lt;/p&gt;
&lt;p&gt;If one of your columns is taller than the others, the next row will start immediately after that column, instead of clearing to the next line.&lt;/p&gt;
&lt;p&gt;This can be solved by adding an extra dom element to wrap the columns in each row and giving it &lt;code&gt;clear:both&lt;/code&gt;, or it can be solved with nth child selectors (ie. clearing every third item), or it could be solved with javascript plugins like &lt;a href=&quot;http://masonry.desandro.com/&quot;&gt;masonry&lt;/a&gt;, but all of those solutions have their downsides. Either it’s complicated, or it’s not semantic, or it relies on javascript. Furthermore, as you make your pages responsive, these solutions become even more problematic. All the sudden there are different numbers of columns in the row and you have to change your dom and css for every breakpoint…&lt;/p&gt;
&lt;h3 id=&quot;inline-block-to-the-rescue-&quot;&gt;Inline-block to the Rescue!&lt;/h3&gt;
&lt;p&gt;As it turns out, you can solve this problem by not using floats. Essentially, you give all the columns a display of inline-block and the columns will always wrap onto the next line below the tallest column above them. There is some sort of strange css voodoo to fix inline-block responding to whitespace, but all in all it’s actually pretty simple:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-css&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Main wrapper for grid */&lt;/span&gt;
&lt;span class=&quot;class&quot;&gt;.col-group&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;{
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-family&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; monospace&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;/* for spacing columns correctly */&lt;/span&gt;
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;letter-spacing&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; -.&lt;span class=&quot;number&quot;&gt;65&lt;/span&gt;em&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;/* this too */&lt;/span&gt;
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin-left&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;em&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin-right&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;em&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;text-align&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; left&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;/* center or justify for columns in last row */&lt;/span&gt;
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; block&lt;/span&gt;&lt;/span&gt;;
&lt;span class=&quot;rule&quot;&gt;}&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;comment&quot;&gt;/* Individual columns */&lt;/span&gt;
&lt;span class=&quot;class&quot;&gt;.col&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;{
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-family&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; Serif&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;/* be sure to reset the font and letter-spacing */&lt;/span&gt;
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;letter-spacing&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; normal&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; inline-block&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;padding-left&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;em&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;padding-right&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;em&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; relative&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;float&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; none&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;text-align&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; left&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;vertical-align&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; top&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;/* align row's columns top or baseline */&lt;/span&gt;
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;box-sizing&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; border-box&lt;/span&gt;&lt;/span&gt;;
&lt;span class=&quot;rule&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then you just need to set up some column width classes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-css&quot;&gt;&lt;span class=&quot;class&quot;&gt;.col1of1&lt;/span&gt;   &lt;span class=&quot;rules&quot;&gt;{ &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;float&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; none&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;rule&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;class&quot;&gt;.col1of2&lt;/span&gt;   &lt;span class=&quot;rules&quot;&gt;{ &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;%&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;rule&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;class&quot;&gt;.col1of3&lt;/span&gt;   &lt;span class=&quot;rules&quot;&gt;{ &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;33.33333&lt;/span&gt;%&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;rule&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;class&quot;&gt;.col2of3&lt;/span&gt;   &lt;span class=&quot;rules&quot;&gt;{ &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;66.66666&lt;/span&gt;%&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;rule&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;class&quot;&gt;.col1of4&lt;/span&gt;   &lt;span class=&quot;rules&quot;&gt;{ &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;%&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;rule&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;class&quot;&gt;.col3of4&lt;/span&gt;   &lt;span class=&quot;rules&quot;&gt;{ &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;75&lt;/span&gt;%&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;rule&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;class&quot;&gt;.col1of5&lt;/span&gt;   &lt;span class=&quot;rules&quot;&gt;{ &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;%&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;rule&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;class&quot;&gt;.col2of5&lt;/span&gt;   &lt;span class=&quot;rules&quot;&gt;{ &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;%&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;rule&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;class&quot;&gt;.col3of5&lt;/span&gt;   &lt;span class=&quot;rules&quot;&gt;{ &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;%&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;rule&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;class&quot;&gt;.col4of5&lt;/span&gt;   &lt;span class=&quot;rules&quot;&gt;{ &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;%&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;rule&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;class&quot;&gt;.col1of6&lt;/span&gt;   &lt;span class=&quot;rules&quot;&gt;{ &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;16.6666&lt;/span&gt;%&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;rule&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;class&quot;&gt;.col5of6&lt;/span&gt;   &lt;span class=&quot;rules&quot;&gt;{ &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;83.3333&lt;/span&gt;%&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;rule&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;class&quot;&gt;.col1of12&lt;/span&gt;  &lt;span class=&quot;rules&quot;&gt;{ &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;8.33333&lt;/span&gt;%&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;rule&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;class&quot;&gt;.col5of12&lt;/span&gt;  &lt;span class=&quot;rules&quot;&gt;{ &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;41.6666&lt;/span&gt;%&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;rule&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;class&quot;&gt;.col7of12&lt;/span&gt;  &lt;span class=&quot;rules&quot;&gt;{ &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;58.3333&lt;/span&gt;%&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;rule&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;class&quot;&gt;.col11of12&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;{ &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;91.6666&lt;/span&gt;%&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;rule&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then, in your html, you can create a simple, smart, inline-block grid:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;col-group&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;col col1of2&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;this will take up half&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;col col1of2&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;so will this&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;col col1of4&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;this is a quarter&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;col col1of4&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;and all&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;col col1of4&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;of these&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;col col1of4&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;as well&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;additional-bonuses&quot;&gt;Additional Bonuses&lt;/h4&gt;
&lt;p&gt;You can easily control how the final row behaves in your grid. If you want it to center the remaining columns, you can use &lt;code&gt;text-align: center&lt;/code&gt;. If you want to make them take up the whole row, just use &lt;code&gt;text-align: justify&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can also control how each column is vertically aligned in the row. If you’d like the columns to be aligned on the baseline, instead of the top, use &lt;code&gt;vertical-align: baseline&lt;/code&gt; on the column class.&lt;/p&gt;
&lt;p&gt;If you’re using borders and padding, you can also use &lt;code&gt;box-sizing: border-box&lt;/code&gt; to make the box model more straightforward.&lt;/p&gt;
&lt;p&gt;Check out &lt;a href=&quot;http://jsfiddle.net/9U6v5/25/&quot;&gt;this jsfiddle&lt;/a&gt; to see it in action. (Or see the full screen result &lt;a href=&quot;http://jsfiddle.net/9U6v5/25/show/&quot;&gt;here&lt;/a&gt;.)&lt;/p&gt;
</description>
    </item>
    <item>
      <title>USGS Topo Maps</title>
      <link>/articles/usgs-topo-maps/</link>
      <pubDate>Thu, 14 Nov 2013 16:00:00 -0800</pubDate>
      <guid isPermaLink="true">/articles/usgs-topo-maps/</guid>
      <author></author>
      <description>&lt;p&gt;The USGS began mapping the country in 1879 and has been the main mapping agency of the United States ever since. The best known USGS maps are the 1:24,000-scale topographic maps, also known as seven point five minute quadrangles. Originally meant to help with mineral exploration, these maps quickly became the defacto standard for trusted topological information in the United States.&lt;/p&gt;
&lt;p&gt;From 1947 to 1992 the USGS created over 55,000 of these maps for the lower United States and periodically revised them. This is the only uniform map series that covers the entire area of the United States in considerable detail. These maps have been used for decades by people who love the outdoors, land planners, and emergency responders.&lt;/p&gt;
&lt;p&gt;The map above is a digitized version of the classic USGS paper maps, which was made into a feature service and hosted on ArcGIS Online.&lt;/p&gt;
&lt;h2 id=&quot;modern-usgs-maps&quot;&gt;Modern USGS Maps&lt;/h2&gt;
&lt;p&gt;A few years ago, with the rise of digital media and advances in GIS software, the USGS started offering these maps digitally. Created in the familiar 7.5-minute quadrangle format like the paper maps, US Topo maps are updated frequently and can now be distributed even further.&lt;/p&gt;
&lt;p&gt;The National Map data that are used to build these maps are available for public download, allowing the USGS to remain open and giving developers a great asset to work with in terms of spatial data.&lt;/p&gt;
&lt;h2 id=&quot;learn-more&quot;&gt;Learn More&lt;/h2&gt;
&lt;p&gt;Check out the &lt;a href=&quot;http://www.usgs.gov/pubprod/maps.html&quot;&gt;USGS website&lt;/a&gt; or watch &lt;a href=&quot;http://gallery.usgs.gov/videos/568&quot;&gt;this video&lt;/a&gt; to learn more about the USGS and their work with the US Topo maps. To learn more about the Esri provided map service powering the web map, read the &lt;a href=&quot;http://www.arcgis.com/home/item.html?id=99cd5fbd98934028802b4f797c4b1732&quot;&gt;item detail page&lt;/a&gt; on ArcGIS Online.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;btn green&quot; href=&quot;/maps/usgs/&quot;&gt;View the Web Map&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Open Season</title>
      <link>/articles/open-season/</link>
      <pubDate>Fri, 18 Oct 2013 17:00:00 -0700</pubDate>
      <guid isPermaLink="true">/articles/open-season/</guid>
      <author></author>
      <description>&lt;p class=&quot;caption&quot;&gt;Cover photo taken by &lt;a href=&quot;http://ryanresella.com&quot;&gt;Ryan Resella&lt;/a&gt; and licensed under Creative Commons.&lt;/p&gt;

&lt;p&gt;Max Ogden took the stage at Realtime Conf with passion, a love of cats, and a stellar beard. His talk ranged from the node community to the fields that are a frontier for openness. Here are my quickly written notes:&lt;/p&gt;
&lt;h2 id=&quot;node-and-npm&quot;&gt;Node and NPM&lt;/h2&gt;
&lt;p&gt;Node has several non-blocking work-flows for growing the community. Node is pretty figured out at this point, just a handful of fast APIs for common protocols.&lt;/p&gt;
&lt;p&gt;NPM is where you can put &lt;em&gt;anything&lt;/em&gt;. No dependency hell. Any number of people can work on something. This grows a community fast. Thousands and thousands of modules exist in an interrelated ecosystem.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NPM is more interesting than Node.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Publishing small modules that have version numbers is important. It helps to distribute maintenance and responsibility. Everybody owns their own chunk. If you have a feature you want in another module, just write your own module with that feature and depend on the original module. In that way, you become the owner of that module.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ npm install
$ npm start
$ npm test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These three commands should be used in every node module. No coffee, no grunt, no whatever. Just stick to these simple ways of doing it.&lt;/p&gt;
&lt;p&gt;GitHub has enabled npm and node. There is usually a one-to-one relation to node-modules and GitHub repos.&lt;/p&gt;
&lt;p&gt;Have their own federated schooling system. &lt;a href=&quot;http://nodeschool.io/&quot;&gt;Node School&lt;/a&gt; is a school that runs offline on your command line. It teaches you all kinds of awesome stuff.&lt;/p&gt;
&lt;p&gt;Module system allows for dissenting opinions to coexist. This diversity is good and healthy.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;May the best fork win.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you don’t like it, fork it. You don’t have to agree. Just implement your feature on a fork. This is a non-blocking work-flow.&lt;/p&gt;
&lt;p&gt;An API is intuitive if the methods tell you what it is and what they do. If you do it right, your dependents on npm go up. Don’t call your modules intuitive, let other people do that. You don’t need to market things that are good. They’ll just become part of everybody’s project.&lt;/p&gt;
&lt;h2 id=&quot;the-open-world&quot;&gt;The Open World&lt;/h2&gt;
&lt;p&gt;Ogden then showed a great chart that diagrammed all the components needed to have something be truly open. This led to identifying some ‘Frontiers of Openness’, or areas of humanity where there is still a lot left to be desired in terms of keeping it open.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Open Science:&lt;/strong&gt; doing fairly well, but needs content freedom. Just look at Aaron Schwartz.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Open Data:&lt;/strong&gt; been around long enough that there are a myriad of ways to do it. None of them have really taken off, but there has been a lot of success there.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Open Government:&lt;/strong&gt; People aren’t even sure if this is a good idea yet. It’s very early. Local government is a way to get around the mistrust of federal government. Talked about Code for America, and Textizen along with lots of other startups who are working to make open government a reality.&lt;/p&gt;
&lt;p&gt;People should bravely leave their silos and go help the fight of the frontier. Work together to make everything more transparent and open.&lt;/p&gt;
&lt;p&gt;Check out the slides &lt;a href=&quot;http://maxogden.github.io/slides/realtimeconf/#/1&quot;&gt;here&lt;/a&gt; or watch the video:&lt;/p&gt;
&lt;div class=&quot;video-wrap&quot;&gt;&lt;iframe src=&quot;//player.vimeo.com/video/77376239?title=0&amp;amp;byline=0&amp;amp;portrait=0&quot; frameborder=&quot;0&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
</description>
    </item>
    <item>
      <title>Digital Feudalism</title>
      <link>/articles/digital-feudalism/</link>
      <pubDate>Thu, 17 Oct 2013 17:00:00 -0700</pubDate>
      <guid isPermaLink="true">/articles/digital-feudalism/</guid>
      <author></author>
      <description>&lt;p class=&quot;caption&quot;&gt;Cover Image from &lt;a href=&quot;http://www.flickr.com/photos/cvonposer/6401515437/&quot;&gt;cvonposer&lt;/a&gt; on Flickr. Licensed under Creative Commons&lt;/p&gt;

&lt;p&gt;At Realtime Conf 2013, &lt;a href=&quot;http://aralbalkan.com/&quot;&gt;Aral Balkan&lt;/a&gt; gave an awesome talk about data ownership and the future of the open source experience. He covers a lot of ground ranging from Apple, Google, and the NSA to cyborgs and design. I’ve written down the highlights below.&lt;/p&gt;
&lt;h3 id=&quot;being-a-cyborg&quot;&gt;Being a Cyborg&lt;/h3&gt;
&lt;p&gt;Where do we draw the boundaries of our person? Balkan rightly argues that phones and other devices are cybernetic extensions of us. The camera extends your eyes, the phone/text amplifies your voice, the storage and RAM extend your memory. Your device is part of you and extends your abilities.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We are cyborgs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What naturally follows is that surveillance is a violation of the person. Eric Schmidt (of Google) said, “If you have something you want somebody to know, maybe you shouldn’t be doing it in the first place.” Basically, this is total bullshit. Eric does a lot of things he doesn’t want other people to know about, namely masturbation.&lt;/p&gt;
&lt;p&gt;Clearly Eric doesn’t understand that privacy is about what you &lt;em&gt;want&lt;/em&gt; to share. Article 12 protects this. It’s a fundamental right.&lt;/p&gt;
&lt;h3 id=&quot;google&quot;&gt;Google&lt;/h3&gt;
&lt;p&gt;Google has always been about services. They have multiple devices, and one login. Same experience on all devices.
Google’s business model is monetizing your data.&lt;/p&gt;
&lt;p&gt;They use games as a means to get data. Ingres teaches pedestrian routes. ReCaptcha teaches how to digitize books.&lt;/p&gt;
&lt;p&gt;End game is to give you services, devices, and connectivity so they have &lt;em&gt;all your data&lt;/em&gt; (to monetize). Google needs you to volunteer all your data. They need your data to survive.&lt;/p&gt;
&lt;h3 id=&quot;what-to-do-&quot;&gt;What to Do?&lt;/h3&gt;
&lt;p&gt;We need to own our ‘digital self’. Unfortunately this is hard. It is quite possible for developers and ‘enthusiasts’, but it is not possible for your grandma.&lt;/p&gt;
&lt;p&gt;We need to make open source better, and not just the code. We need to think about the experience. Open source software is still feature driven. It must become experience driven.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hardware + Software + Connectivity = Experience&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;An experience is comprised of hardware, software, and connectivity. Open source and indie data projects need to think about all of these elements. In order to provide users (especially non-enthusiast users) a good overall experience, all of these levels are important. We need ‘experience driven’ open source.&lt;/p&gt;
&lt;p&gt;Indie Data is empowering regular people to own their own data. Visit &lt;a href=&quot;http://indiedata.org/&quot;&gt;Indie Data&lt;/a&gt; to learn more.&lt;/p&gt;
&lt;h4 id=&quot;design&quot;&gt;Design&lt;/h4&gt;
&lt;p&gt;Balkan devoted quite a bit of his talk to design. Basically he said three things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Design is about focus. It’s about saying no no no no.&lt;/li&gt;
&lt;li&gt;Design is not a veneer. Not makeup.&lt;/li&gt;
&lt;li&gt;Design leads development and development informs design.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vision. Everything is filtered through design vision. We need to understand humans to make things for humans. What sort of things? Things that make their lives better.&lt;/p&gt;
&lt;p&gt;Watch the &lt;a href=&quot;http://thelink.is/uxtalk&quot;&gt;full UX talk&lt;/a&gt; if you’re interested in more about ux.&lt;/p&gt;
&lt;p&gt;Watch &lt;a href=&quot;http://tacma.net/&quot;&gt;Terms and Conditions May Apply&lt;/a&gt; to learn more and teach friends about privacy.&lt;/p&gt;
&lt;p&gt;Most people are digital serfs, having to rent their services with their data. Let’s build something to free them from that slavery. Let them keep their data &lt;em&gt;and&lt;/em&gt; have a great experience.&lt;/p&gt;
&lt;p&gt;Currently Balkan is working on &lt;a href=&quot;http://aralbalkan.com/notes/codename-prometheus/&quot;&gt;Codename Prometheus&lt;/a&gt;, a project that ambitiously tries to solve all of these problems. I can’t wait.&lt;/p&gt;
&lt;div class=&quot;video-wrap&quot;&gt;&lt;iframe src=&quot;//player.vimeo.com/video/77257232?title=0&amp;amp;byline=0&amp;amp;portrait=0&quot; frameborder=&quot;0&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;

</description>
    </item>
    <item>
      <title>Devicons</title>
      <link>/articles/devicons/</link>
      <pubDate>Mon, 05  Aug 2013 17:00:00 -0700</pubDate>
      <guid isPermaLink="true">/articles/devicons/</guid>
      <author></author>
      <description>&lt;p&gt;At work the other day I was thinking out loud about a strategy for generating full-color icons with a web font. Essentially the idea is to use &lt;code&gt;:before&lt;/code&gt; and &lt;code&gt;:after&lt;/code&gt; pseudo elements to provide a foreground and background to your icon, thusly giving it three colors. If you’re a visual learner, it works like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/devicons/before-after.svg&quot; alt=&quot;Illustration&quot;&gt;&lt;/p&gt;
&lt;p&gt;People at my work tend to take pipe-dreams very seriously, so it wasn’t all that surprising that one of my co-workers, &lt;a href=&quot;http://atelier-wise.aws.af.cm/&quot;&gt;Nik Wise&lt;/a&gt; was listening to me, and then spent the next ten minutes expertly implementing what I had just imagined.&lt;/p&gt;
&lt;p&gt;It turns out, that this technique is actually far simpler than I first thought it was going to be, and that the most time consuming part of the workflow is building and color separating the icons. Once you’ve exported every layer as an .svg file, you just upload them all to icoMoon (or your web font tool of choice), assign them ligatures (so you can remember their names later), and download the bundle.&lt;/p&gt;
&lt;p&gt;After that, you just create &lt;code&gt;:before&lt;/code&gt; and &lt;code&gt;:after&lt;/code&gt; elements and make their content attribute equal to the corresponding icon. The css ends up looking something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-css&quot;&gt;&lt;span class=&quot;at_rule&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;font-face&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;{
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-family&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;string&quot;&gt;'devicons'&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;function&quot;&gt;url(&lt;span class=&quot;string&quot;&gt;'fonts/devicons.eot'&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-weight&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; normal&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-style&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; normal&lt;/span&gt;&lt;/span&gt;;
&lt;span class=&quot;rule&quot;&gt;}&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;class&quot;&gt;.icon-finder&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;{
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-family&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;string&quot;&gt;'devicons'&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-feature-settings&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;liga&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;dlig&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;text-rendering&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;optimizeLegibility&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;line-height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;-webkit-font-smoothing&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; antialiased&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;hexcolor&quot;&gt;#231F20&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
&lt;span class=&quot;rule&quot;&gt;}&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;class&quot;&gt;.icon-finder&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:before&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;{
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin-right&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;em&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;hexcolor&quot;&gt;#71A0D2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;string&quot;&gt;&quot;finderback&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
&lt;span class=&quot;rule&quot;&gt;}&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;class&quot;&gt;.icon-finder&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:after&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;{
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin-left&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;em&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;hexcolor&quot;&gt;#E05130&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;string&quot;&gt;&quot;finderfront&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
&lt;span class=&quot;rule&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above assumes you set up your webfont with the ligatures “finder”, “finderback”, and “finderfront”, each representing one of the three layers of your icon.&lt;/p&gt;
&lt;p&gt;The corresponding html is dead simple:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;h3&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;icon-finder&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;finder&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can take a look at &lt;a href=&quot;http://paulcpederson.github.io/devicons/&quot;&gt;the proof of concept&lt;/a&gt; to see them in action, or look at &lt;a href=&quot;https://github.com/nikolaswise/devicons&quot;&gt;the GitHub repo&lt;/a&gt; to see how they’re implemented. Nik has also written a &lt;a href=&quot;https://github.com/nikolaswise/three-color-icons&quot;&gt;terrific write up&lt;/a&gt; of the technique that goes into much more detail.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Abstract Color</title>
      <link>/articles/abstract-color/</link>
      <pubDate>Thu, 21 Mar 2013 17:00:00 -0700</pubDate>
      <guid isPermaLink="true">/articles/abstract-color/</guid>
      <author></author>
      <description>&lt;p&gt;Arguably the highpoint of American Art in the 20th century, Abstract Expressionism represented an undeniable paradigm shift in the way the Western art world made and thought about art.&lt;/p&gt;
&lt;p&gt;Abstract Expressionism was a new approach to studio art. All at once innovative, phallic, and raw, Ab-Ex generally presented little or no figurative elements, many times relying strictly on the “Painterly Gesture” of the artist.&lt;/p&gt;
&lt;p&gt;The impact of Abstract Expressionism goes far deeper than studio art. One of the major contributions of the Abstract Expressionists was their bold and commanding use of color. When I’m stuck choosing colors for a project, I often reference works from this time. Because artists of this movement focused purely on form and process rather than figurative content, their use of color is often very communicative. Below are three of my favorite artists from this period.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/abstract-color/deKooning.jpg&quot; alt=&quot;Several Willem de Kooning Pieces&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;caption&quot;&gt;Clockwise from top-left: Door to the River (1960), Gansevoort Street (1949), Seated Man (1939), Excavation (1950)&lt;/p&gt;

&lt;h2 id=&quot;willem-de-kooning&quot;&gt;Willem de Kooning&lt;/h2&gt;
&lt;p&gt;Willem de Kooning took color to another level. He worked with paint very loosely, and tried to keep the paint wet as long as possible. To that end he endlessly experimented with paint, adding cooking oils, turpentine drips, and endless amounts of medium and thinner. He also created very elaborate color charts which outlined and organized colors by their dry time.&lt;/p&gt;
&lt;p&gt;This obsession with color shows in his work. He often uses warmer, more earthy colors such as Ochre, yellow, Burnt Sienna, and cream, but wasn’t afraid of cool colors, or even pastels.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Style is a fraud. I always felt the Greeks were hiding behind their columns.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Even though he has been quoted as saying &lt;em&gt;“Style is a fraud”&lt;/em&gt;, he certainly did have a style all his own. He didn’t hide behind it, it was simply a byproduct of his innovation. Frequently the emotion and timbre of his color choice is what creates such a strong voice.&lt;/p&gt;
&lt;p&gt;Color in his work has a life all its own. It is a central figure, almost completely unreliant on composition. Even though much of his work is moderately figurative, his use of color bring an expressive and bold voice to his work.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/abstract-color/gottlieb.jpg&quot; alt=&quot;Several Adolph Gottlieb Pieces&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;caption&quot;&gt;Clockwise from top-left: Blues (1962), Three Discs on Chrome Ground (1969), Transfiguration (1958), Mood (1967)&lt;/p&gt;

&lt;h2 id=&quot;adolph-gottlieb&quot;&gt;Adolph Gottlieb&lt;/h2&gt;
&lt;p&gt;Adolph Gottlieb was an American painter who studied in New York but did most of his work in the Arizona desert. The sense of space in his paintings clearly reflects the immense environment that surrounded him day to day. The vast space he created in his “landscapes” often becomes purely abstract, reduced to its most basic form and color. He is considered one of the first color-field painters.&lt;/p&gt;
&lt;p&gt;Gottlieb was a commanding colorist, even though his palettes often include very few colors. Color was especially important in his &lt;em&gt;Burst&lt;/em&gt; series during the early seventies and this period in his career is a terrific cache of commanding and graphic palettes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/abstract-color/pollock.jpg&quot; alt=&quot;Several Pollock Pieces&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;caption&quot;&gt;Clockwise from top-left: Number 11 (1952), Number 13A (1948), Lavender Mist (1950), Number 12 (1949)&lt;/p&gt;

&lt;h2 id=&quot;jackson-pollock&quot;&gt;Jackson Pollock&lt;/h2&gt;
&lt;p&gt;Perhaps the best known of the abstract expressionist movement, Jackson Pollock is a commanding character in art history. Separating the man from the legend is difficult, but his use of color generally speaks for itself. Especially in his later work, when color really becomes one of the sole components of the work, his paintings have very compelling palettes.&lt;/p&gt;
&lt;p&gt;Pollock did not work from color sketches (or sketches of any kind) in his later work, instead trying to paint &lt;em&gt;“from the subconscious”.&lt;/em&gt; His choice of paints was very experimental, ranging from oils to standard house paints. For this reason, the individual colors are sometimes stock from the factory, but the way he has combined them, they become something far different.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/abstract-color/cathedral.jpg&quot; alt=&quot;Cathedral Detail&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;caption&quot;&gt;Cathedral (Detail) - 1957&lt;/p&gt;

&lt;p&gt;Although many of his pieces are more earthy and warm with dark reds, creams, deep yellows, and forest greens, he did produce several works that are much more severe. &lt;em&gt;Cathedral&lt;/em&gt;, a piece Pollock completed in 1947 (detail above), uses bright red, yellow, orange enamel, along with aluminum paint that is bright silver.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Sublime Writer</title>
      <link>/articles/sublime-writer/</link>
      <pubDate>Tue, 20 Nov 2012 16:00:00 -0800</pubDate>
      <guid isPermaLink="true">/articles/sublime-writer/</guid>
      <author></author>
      <description>&lt;p&gt;Immediately on its release, I fell in love with iA Writer. Like Clear, Solar, or the now assimilated Sparrow, iA Writer is one of a new generation of apps that strives for focus rather than features. Reading their &lt;a href=&quot;http://informationarchitects.net/blog/responsive-typography-the-basics/&quot; title=&quot;Responsive Web Typography, the Basics.&quot;&gt;blog&lt;/a&gt;, one gets a true sense of just how in depth they went while designing the app.&lt;/p&gt;
&lt;p&gt;Sometimes, though, it can be faster to have your entire workflow within one app, and for me, that app is Sublime Text 2. That’s why I made &lt;a href=&quot;https://github.com/paulcpederson/sublime-writer&quot; title=&quot;Sublime Writer&quot;&gt;Sublime Writer&lt;/a&gt;. It gives Sublime Text 2 the beauty of iA Writer when you need to write web content (markdown), but lets you keep your favorite editor color scheme when you need to write code.&lt;/p&gt;
&lt;p&gt;Sublime text also has the concept of “Distraction Free” mode (pictured below), which allows you to approximate iA Writer’s terrific “focus” mode. Essentially it enables you to move into a full-screen environment, removing all the chrome of the operating system.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/sublime-writer/distraction-free.jpg&quot; alt=&quot;Distraction Free Mode&quot;&gt;&lt;/p&gt;
&lt;p&gt;If you’re interested in checking it out, you can find a repo on my &lt;a href=&quot;https://github.com/paulcpederson/sublime-writer&quot;&gt;github&lt;/a&gt;. The GitHub repo has detailed instructions on how to install the theme in Sublime Text 2 (it’s really just adding it to a specific folder). The theme looks best with &lt;a href=&quot;http://www.boldmonday.com/en/nitti/&quot;&gt;Nitti&lt;/a&gt;, a terrific monospace font for reading and writing.&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>